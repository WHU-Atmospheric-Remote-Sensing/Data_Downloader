import sys
import os

testPath = os.path.dirname(__file__)
srcPath = os.path.join(os.path.dirname(testPath), 'src')

sys.path.append(srcPath)

from radiosonde_downloader import RSDownloader
import unittest
from datetime import datetime


class Test(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        print('Start to test radiosonde_downloader.py...')

    @classmethod
    def tearDownClass(self):
        print('Finish testing radiosonde_downloader.py!')

    def setUp(self):
        print("execute setUp")

    def tearDown(self):
        print("execute tearDown")

    def test_RSDownloader_init(self):
        print('---> Test on RSDownloader initialization')

        flagTest = False   # test flag

        try:
            rs = RSDownloader()
            flagTest = True
        except expression as e:
            flagTest = False

        self.assertTrue(flagTest)

    def test_list_station_number(self):
        print('---> Test on RSDownloader.list_station_number')

        flagTest = False   # test flag

        try:
            rs = RSDownloader()
            rs.list_station_number()
            flagTest = True
        except expression as e:
            flagTest = False

        self.assertTrue(flagTest)

    def test_search_station_name(self):
        print('---> Test on RSDownloader.search_station_name')

        rs = RSDownloader()
        station_name = rs.search_station_name(57494)

        self.assertEqual(station_name, 'WUHAN')

    def test_get_daily_data(self):
        print('---> Test on RSDownloader.get_daily_data')

        flagTest = False   # test flag

        try:
            rs = RSDownloader()

            startTime = datetime(2018, 12, 1)
            stopTime = datetime(2018, 12, 2)
            station_number = 57494   # wuhan

            rs.get_daily_data(startTime, stopTime, siteNum=station_number)

            flagTest = True

        except expression as e:
            flagTest = False

        self.assertTrue(flagTest)

    def test_save_netCDF(self):
        print('---> Test on RSDownloader.save_netCDF')

        rs = RSDownloader()

        startTime = datetime(2018, 12, 1)
        stopTime = datetime(2018, 12, 2)
        station_number = 57494   # wuhan

        rsData, rsDims, rsGAttrs = rs.getData(startTime, stopTime,
                                              siteNum=station_number)

        iterators = zip(rsData, rsDims, rsGAttrs)
        for thisData, thisDims, thisGAttrs in iterators:
            rsFile = rs.save_netCDF(
                thisData, thisDims, thisGAttrs,
                os.path.join(os.path.dirname(testPath), 'tmp'), force=True)
            self.assertTrue(os.path.exists(rsFile))


def main():

    suite = unittest.TestSuite()

    tests = [
        Test('test_RSDownloader_init'),
        Test('test_list_station_number'),
        Test('test_search_station_name'),
        Test('test_get_daily_data'),
        Test('test_save_netCDF')
        ]   # setup the test list
    suite.addTests(tests)

    # print the test report as html file
    # with open('HTMLReport.html', 'w') as f:
    #     runner = HTMLTestRunner(stream=f,
    #                             title='MathFunc Test Report',
    #                             description='generated by HTMLTestRunner.',
    #                             verbosity=2
    #                             )
    #     runner.run(suite)

    # print the test report to the console
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite)


if __name__ == '__main__':
    main()
